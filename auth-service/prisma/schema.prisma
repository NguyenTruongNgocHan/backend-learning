generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String?
  status       String   @default("PENDING") // PENDING | ACTIVE | BANNED
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile       Profile?
  roles         UserRole[]
  sessions      Session[]
  refreshTokens RefreshToken[]
  emailTokens   EmailVerificationToken[]
  resetTokens   PasswordResetToken[]
  OAuthAccount  OAuthAccount[]
}

model Profile {
  id          String   @id @default(uuid())
  userId      String   @unique
  displayName String?
  avatarUrl   String?
  bio         String?
  star        Int      @default(0)
  level       Int      @default(1)
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Role {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  users       UserRole[]
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  grantedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])
}

model Session {
  id         String    @id @default(uuid())
  userId     String
  deviceInfo String?
  ipAddress  String?
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  revokedAt  DateTime?

  user User @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime
  revokedAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

model EmailVerificationToken {
  id         String   @id @default(uuid())
  userId     String
  otpHash    String
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  consumedAt DateTime?
  user       User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id         String    @id @default(uuid())
  userId     String
  tokenHash  String
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  consumedAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

model OAuthAccount {
  id           String    @id @default(uuid())
  provider     String // 'google' | 'facebook'
  providerId   String // UID tá»« OAuth
  userId       String
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerId])
}
